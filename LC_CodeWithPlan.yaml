name: "Code_Flow"
description: |2- 
  Given a problem description, generate code directly.

# ~~~ Input interface specification ~~~
input_interface_non_initialized:  # Applied when constructing the first user message.
  - "problem_description"
  - "io_description"
  - "constraints"
  - "python_stub"
  - "plan"

input_interface_initialized:  # Applied when constructing all subsequent user messages.
  - "query"

# ~~~ Output interface specification ~~~
output_interface:
  - "api_output"

# ~~~ Flow specification ~~~
backend:
  _target_: aiflows.backends.llm_lite.LiteLLMBackend
  api_infos: ???
  model_name:
    openai: "gpt-4"
    azure: "azure/gpt-4"

generation_parameters:
  n: 1
  max_tokens: 3000
  temperature: 0.3

  model_kwargs:
    top_p: 0.2
    frequency_penalty: 0
    presence_penalty: 0

system_message_prompt_template:
  _target_: aiflows.prompt_template.JinjaPrompt
  template: |2-
    Your goal is to provide executable Python code that solves a coding interview problem. The code should correctly handle all corner cases in order to pass the hidden test cases, which are used to evaluate the correctness of the solution.

    The user will specify the problem by providing you with:
      - the problem statement
      - example test cases
      - the constraints of the problem

    Additionally, the user will provide you with a conceptual solution to the problem which should guide your reasoning and the code implementation.

    The user will provide you with a task and an output format that you will strictly follow.
  input_variables: []
  

human_message_prompt_template:
  _target_: aiflows.prompt_template.JinjaPrompt
  template: "{{query}}"
  input_variables:
    - "query"
  

init_human_message_prompt_template:
  _target_: aiflows.prompt_template.JinjaPrompt
  template: |2-
    # Problem statement
    {{problem_description}}

    {{io_description}}

    # Constraints
    {{constraints}}
    
    # Conceptual solution
    {{plan}}


    Return Python code that solves the problem. The code should extend the following stub:
    ```python
    {{python_stub}}
    ```

    without changing the method signatures.
    Reply in the following format:
    ```python
    {{code_placeholder}}
    ```
    ```
  input_variables:
    - "problem_description"
    - "io_description"
    - "constraints"
    - "python_stub"
    - "plan"
  partial_variables:
    code_placeholder: "{{python_code}}"
  
