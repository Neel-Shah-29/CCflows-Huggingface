name: "Code_Flow"
description: |2- 
  Given a problem description, generate code directly.

# ~~~ Input interface specification ~~~
input_interface_non_initialized:  # Applied when constructing the first user message.
  - "problem_description"
  - "input_description"
  - "output_description"
  - "io_examples_and_explanation"

input_interface_initialized:  # Applied when constructing all subsequent user messages.
  - "query"

# ~~~ Output interface specification ~~~
output_interface:
  - "api_output"

# ~~~ Flow specification ~~~
backend:
  _target_: aiflows.backends.llm_lite.LiteLLMBackend
  wait_time_per_key: 6
  model_name:
    openai: "gpt-4"
    azure: "azure/gpt-4"
  n: 1
  max_tokens: 3000
  temperature: 0.3
  top_p: 0.2
  frequency_penalty: 0
  presence_penalty: 0

system_message_prompt_template:
  _target_: aiflows.prompt_template.JinjaPrompt
  template: |2-
    Your goal is to provide executable Python code that solves a competitive programming problem. The code should correctly handle all corner cases in order to pass the hidden test cases, which are used to evaluate the correctness of the solution.

    The user will specify the problem by providing you with:
      - the problem statement
      - input description
      - output description
      - example test cases
      - (optional) explanation of the test cases

    The user will provide you with a task and an output format that you will strictly follow.
  input_variables: []
  

human_message_prompt_template:
  _target_: aiflows.prompt_template.JinjaPrompt
  template: "{{query}}"
  input_variables:
    - "query"
  

init_human_message_prompt_template:
  _target_: aiflows.prompt_template.JinjaPrompt
  template: |2-
    # Problem statement
    {{problem_description}}

    # Input description
    {{input_description}}

    # Output description
    {{output_description}}

    {{io_examples_and_explanation}}


    The input should be read from the standard input and the output should be passed to the standard output.
    Return Python code that solves the problem. Reply in the following format:
    ```python
    {{code_placeholder}}
    ```
  input_variables:
    - "problem_description"
    - "input_description"
    - "output_description"
    - "io_examples_and_explanation"
  partial_variables:
    code_placeholder: "{{python_code}}"
  
